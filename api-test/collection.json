{
  "info": {
    "name": "CRM System API Tests",
    "description": "API tests for CRM System including authentication, users, issues, forms, and companies",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Server Status",
      "item": [
        {
          "name": "Check Server Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct message\", function () {",
                  "        pm.expect(pm.response.text()).to.equal(\"Server is running!\");",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login as Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('username');",
                  "        pm.expect(jsonData).to.have.property('role');",
                  "        pm.expect(jsonData).to.have.property('company');",
                  "    });",
                  "    pm.environment.set(\"authToken\", pm.response.json().token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Login as User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('username');",
                  "        pm.expect(jsonData).to.have.property('role');",
                  "        pm.expect(jsonData).to.have.property('company');",
                  "    });",
                  "    pm.environment.set(\"authToken\", pm.response.json().token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Login as Guest",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('username');",
                  "        pm.expect(jsonData).to.have.property('role');",
                  "        pm.expect(jsonData).to.have.property('company');",
                  "    });",
                  "    pm.environment.set(\"authToken\", pm.response.json().token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"chat_id\": \"00000000-0000-0000-0000-000000000001\",\n    \"email\": \"guest@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login/guest",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login", "guest"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('username');",
                  "        pm.expect(jsonData).to.have.property('role');",
                  "        pm.expect(jsonData).to.have.property('company');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 404, or 409\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct message\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Session cleared');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('users');",
                  "        pm.expect(jsonData.users).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Get Employees By Company",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('employees');",
                  "        pm.expect(jsonData.employees).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/bycompany",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "bycompany"]
            }
          },
          "response": []
        },
        {
          "name": "Create Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 404, 409, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('User registered.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"newadmin\",\n    \"email\": \"newadmin@example.com\",\n    \"password\": \"admin123\",\n    \"company\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "admin"]
            }
          },
          "response": []
        },
        {
          "name": "Create Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('User registered.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "create"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('User updated successfully.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstname\": \"Updated\",\n    \"lastname\": \"User\",\n    \"email\": \"updated@example.com\",\n    \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('User was deleted successfully.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201, 400, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('User created successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"testpass123\",\n    \"role\": \"USER\",\n    \"company_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Issues",
      "item": [
        {
          "name": "Get All Issues",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('issues');",
                  "        pm.expect(jsonData.issues).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/issues",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues"]
            }
          },
          "response": []
        },
        {
          "name": "Get Issue By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('issue');",
                  "        pm.expect(jsonData.issue).to.have.property('id');",
                  "        pm.expect(jsonData.issue).to.have.property('title');",
                  "        pm.expect(jsonData.issue).to.have.property('description');",
                  "        pm.expect(jsonData.issue).to.have.property('state');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/issues/00000000-0000-0000-0000-000000000001",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues", "00000000-0000-0000-0000-000000000001"]
            }
          },
          "response": []
        },
        {
          "name": "Update Issue State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Issue state was updated.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"newState\": \"IN_PROGRESS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/issues/00000000-0000-0000-0000-000000000001/state",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues", "00000000-0000-0000-0000-000000000001", "state"]
            }
          },
          "response": []
        },
        {
          "name": "Get Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('messages');",
                  "        pm.expect(jsonData.messages).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/issues/00000000-0000-0000-0000-000000000001/messages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues", "00000000-0000-0000-0000-000000000001", "messages"]
            }
          },
          "response": []
        },
        {
          "name": "Create Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Message was created.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"This is a test message\",\n    \"sender\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/issues/00000000-0000-0000-0000-000000000001/messages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues", "00000000-0000-0000-0000-000000000001", "messages"]
            }
          },
          "response": []
        },
        {
          "name": "Create Issue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201, 400, 401, 404, or 405\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 401, 404, 405]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Issue created successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Issue\",\n    \"description\": \"This is a test issue\",\n    \"status\": \"OPEN\",\n    \"priority\": \"MEDIUM\",\n    \"assigned_to\": 1,\n    \"created_by\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/issues",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues"]
            }
          },
          "response": []
        },
        {
          "name": "Update Issue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 401, 404, or 405\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 404, 405]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Issue was updated successfully.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Issue Title\",\n    \"description\": \"This is an updated issue description\",\n    \"priority\": \"HIGH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/issues/00000000-0000-0000-0000-000000000001",
              "host": ["{{baseUrl}}"],
              "path": ["api", "issues", "00000000-0000-0000-0000-000000000001"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Forms",
      "item": [
        {
          "name": "Get All Forms",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('forms');",
                  "        pm.expect(jsonData.forms).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/forms",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms"]
            }
          },
          "response": []
        },
        {
          "name": "Get Company Form",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('company_info');",
                  "        pm.expect(jsonData.company_info).to.have.property('company_name');",
                  "        pm.expect(jsonData.company_info).to.have.property('subjects');",
                  "        pm.expect(jsonData.company_info.subjects).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/forms/Test Company",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms", "Test Company"]
            }
          },
          "response": []
        },
        {
          "name": "Get Form Subjects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('subjects');",
                  "        pm.expect(jsonData.subjects).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/forms/subjects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms", "subjects"]
            }
          },
          "response": []
        },
        {
          "name": "Create Subject",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Subject was successfully created.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Subject\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/forms/subjects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms", "subjects"]
            }
          },
          "response": []
        },
        {
          "name": "Update Subject",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Subject was updated.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"oldName\": \"Test Subject\",\n    \"newName\": \"Updated Subject\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/forms/subjects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms", "subjects"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Subject",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 401, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Subject was deleted.');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/forms/subjects/Updated Subject",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forms", "subjects", "Updated Subject"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Companies",
      "item": [
        {
          "name": "Get All Companies",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 404, or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('companies');",
                  "        pm.expect(jsonData.companies).to.be.an('array');",
                  "        if (jsonData.companies.length > 0) {",
                  "            pm.expect(jsonData.companies[0]).to.be.a('string');",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/companies",
              "host": ["{{baseUrl}}"],
              "path": ["api", "companies"]
            }
          },
          "response": []
        }
      ]
    }
  ]
} 