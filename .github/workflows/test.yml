# =================================================================
# GitHub Actions Workflow för CRM-systemets Testautomatisering
# =================================================================
# Denna workflow implementerar en komplett CI/CD-pipeline som:
# 1. Kör enhetstester för att verifiera grundläggande funktionalitet
# 2. Testar API-endpoints för att säkerställa korrekt kommunikation
# 3. Verifierar användargränssnittet med automatiserade GUI-tester
# 4. Driftsätter applikationen till produktionsservern vid lyckade tester
#
# Workflow: unit_tests -> api_tests -> gui_tests -> deploy
# Varje steg måste lyckas innan nästa steg påbörjas
# =================================================================

name: CRM System Tests

# =================================================================
# Triggers - När ska workflowen köras?
# =================================================================
# Workflowen aktiveras automatiskt vid:
# - Varje push till main-branch (kontinuerlig integration)
# - Varje pull request mot main-branch (kvalitetskontroll)
# Detta säkerställer att alla ändringar testas innan de mergas
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# =================================================================
# Miljövariabler - Globalt tillgängliga för alla jobb
# =================================================================
# Dessa variabler används för att konfigurera:
# - .NET SDK version för konsistent byggmiljö
# - Databasanslutning för testning
# Alla känsliga värden hämtas från GitHub Secrets
env:
  DOTNET_VERSION: "8.0.x" # .NET SDK version för konsistent byggmiljö
  # Databasrelaterade miljövariabler från GitHub Secrets
  DB_HOST: ${{ secrets.DB_HOST }} # Databasserver (t.ex. localhost eller IP)
  DB_PORT: ${{ secrets.DB_PORT }} # Databasport (standard: 5432 för PostgreSQL)
  DB_NAME: ${{ secrets.DB_NAME }} # Databasnamn för testmiljön
  DB_USER: ${{ secrets.DB_USER }} # Databasanvändare med lämpliga rättigheter
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # Databaslösenord (känslig information)

jobs:
  # =================================================================
  # Job 1: Enhetstester
  # =================================================================
  # Detta jobb kör alla enhetstester för .NET-projektet
  # Syfte: Verifiera att varje komponent fungerar isolerat
  # Körs på: Ubuntu latest för maximal kompatibilitet
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Steg 1: Hämta källkoden från repository
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Konfigurera .NET-miljön med specificerad version
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 3: Skapa testkonfigurationsfil
      # Genererar appsettings.Testing.json med:
      # - Databasanslutningsinformation
      # - E-postkonfiguration för testning
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 4: Installera NuGet-paket och projektberoenden
      - name: Restore dependencies
        run: dotnet restore

      # Steg 5: Kompilera lösningen i Release-läge
      # Använder --no-restore för att undvika dubbel återställning
      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      # Steg 6: Kör enhetstesterna med normal detaljeringsgrad
      # Använder --no-build för att återanvända tidigare bygge
      - name: Run unit tests
        run: dotnet test CRMsystem.UnitTests/CRMsystem.UnitTests.csproj --configuration Release --no-build --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing

  # =================================================================
  # Job 2: API-tester
  # =================================================================
  # Detta jobb kör API-tester med Newman (Postman CLI)
  # Syfte: Verifiera att API:ets endpoints fungerar korrekt
  # Beroende: Kräver att enhetstesterna har passerat
  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit_tests # Körs endast om enhetstesterna lyckas
    steps:
      # Steg 1: Hämta källkoden från repository
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Konfigurera Node.js-miljön
      # Använder Node.js 18 för kompatibilitet med Newman
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Steg 3: Konfigurera .NET-miljön
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 4: Skapa testkonfigurationsfil
      # Samma konfiguration som för enhetstesterna
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 5: Installera Newman CLI för API-testning
      - name: Install Newman
        run: npm install -g newman

      # Steg 6: Installera Node.js-projektberoenden
      - name: Install project dependencies
        run: npm install

      # Steg 7: Installera .NET-projektberoenden
      - name: Install dotnet project dependencies
        run: dotnet restore

      # Steg 8: Bygg .NET-projektet
      - name: Build
        run: dotnet build

      # Steg 9: Starta testservern i bakgrunden
      # Använder nohup för att hålla servern igång
      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      # Steg 10: Vänta på att servern ska starta helt
      # Ger servern tid att initialisera databasen och starta
      - name: Wait for server to start
        run: sleep 10

      # Steg 11: Kör API-testerna med Newman
      # Använder collection.json för testdefinitioner
      # Använder environment.json för miljövariabler
      - name: Run API-Tests
        run: newman run ./api-test/collection.json -e ./api-test/environment.json

  # =================================================================
  # Job 3: GUI-tester
  # =================================================================
  # Detta jobb kör GUI-tester med Playwright
  # Syfte: Verifiera användargränssnittets funktionalitet
  # Beroende: Kräver att API-testerna har passerat
  # Körs på: Ubuntu 22.04 för optimal kompatibilitet med Playwright
  gui_tests:
    name: GUI Tests
    runs-on: ubuntu-22.04
    needs: api_tests # Körs endast om API-testerna lyckas
    steps:
      # Steg 1: Hämta källkoden från repository
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Konfigurera Node.js-miljön
      # Använder Node.js 18 för kompatibilitet med Playwright
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Steg 3: Konfigurera .NET-miljön
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 4: Skapa testkonfigurationsfil
      # Samma konfiguration som för tidigare tester
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 5: Installera systemberoenden för Playwright
      # Installerar nödvändiga Linux-paket för headless browser
      # Inkluderar X11-bibliotek och ljudstöd
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2 libpango-1.0-0 libcairo2 xvfb

      # Steg 6: Installera .NET-projektberoenden
      - name: Install dotnet project dependencies
        run: dotnet restore

      # Steg 7: Bygg Playwright-testprojektet
      - name: Build/Restore Playwright Project
        run: cd ui-tests && dotnet build

      # Steg 8: Installera Playwright och dess drivrutiner
      # Installerar CLI-verktyg och Chromium-webbläsare
      - name: Install Playwright drivers
        run: |
          cd ui-tests
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install chromium
          playwright install-deps chromium

      # Steg 9: Starta testservern i bakgrunden
      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      # Steg 10: Vänta på att servern ska starta helt
      - name: Wait for server to start
        run: sleep 10

      # Steg 11: Kör GUI-testerna med Playwright
      - name: Run GUI-tests
        run: cd ui-tests && dotnet test

  # =================================================================
  # Job 4: Deployment
  # =================================================================
  # Detta jobb driftsätter applikationen till produktionsservern
  # Syfte: Automatisera deployment efter lyckade tester
  # Beroende: Kräver att alla tester har passerat
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [unit_tests, api_tests, gui_tests] # Kräver att alla tester är godkända
    steps:
      # Steg 1: Driftsätt applikationen via SSH
      # Använder appleboy/ssh-action för säker anslutning
      - name: Deploy App
        uses: appleboy/ssh-action@v1.2.0
        with:
          # Anslutningsdetaljer från GitHub Secrets
          host: ${{ secrets.HOST }} # Serveradress
          username: ${{ secrets.USERNAME }} # SSH-användarnamn
          password: ${{ secrets.PASSWORD }} # SSH-lösenord
          port: ${{ secrets.PORT }} # SSH-port (standard: 22)
          script: |
            # Installera Node.js och PM2
            # Använder NodeSource repository för senaste versionen
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pm2

            # Navigera till projektmappen
            cd /srv/www/halmstad/editor

            # Hantera Git-repository
            if [ ! -d ".git" ]; then
              # Om repot inte finns, gör en ny klon
              rm -rf * .*
              git clone https://github.com/editorjakupi/testning-av-crmsystem.git .
            else
              # Om repot finns, uppdatera till senaste version
              git fetch
              git reset --hard origin/main
            fi

            # Bygg och starta frontend (client)
            cd client
            npm ci          # Installera exakta versioner från package-lock.json
            npm run build   # Bygg produktionsversion

            # Bygg och starta backend (server)
            cd ../server
            dotnet restore  # Installera .NET-beroenden
            # Hantera pm2-process
            pm2 stop crm-system || true      # Stoppa om processen finns
            pm2 delete crm-system || true    # Ta bort om processen finns
            pm2 start "dotnet run" --name crm-system -- --urls "http://0.0.0.0:3000"  # Starta ny process
