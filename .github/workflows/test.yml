# Denna workflow kör enhetstester, API-tester och GUI-tester för CRM-systemet
name: CRM System Tests

# Trigger: Workflowen körs när du pushar till eller gör en PR till "main"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: "8.0.x"
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  # Enhetstester
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Steg 1: Checka ut koden från ditt repository
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Installera rätt version av .NET SDK
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 3: Skapa appsettings.Testing.json
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 4: Återställ beroenden
      - name: Restore dependencies
        run: dotnet restore

      # Steg 5: Bygg projektet
      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      # Steg 6: Kör unit testing
      - name: Run unit tests
        run: dotnet test CRMsystem.UnitTests/CRMsystem.UnitTests.csproj --configuration Release --no-build --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing

  # API-tester
  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      - name: Install Newman
        run: npm install -g newman

      - name: Install project dependencies
        run: npm install

      - name: Install dotnet project dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      - name: Wait for server to start
        run: sleep 10

      - name: Run API-Tests
        run: newman run ./api-test/collection.json -e ./api-test/environment.json

  # GUI-tester
  gui_tests:
    name: GUI Tests
    runs-on: ubuntu-22.04
    needs: api_tests
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2 libpango-1.0-0 libcairo2 xvfb

      - name: Install dotnet project dependencies
        run: dotnet restore

      - name: Build/Restore Playwright Project
        run: cd ui-tests && dotnet build

      - name: Install Playwright drivers
        run: |
          cd ui-tests
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install chromium
          playwright install-deps chromium

      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      - name: Wait for server to start
        run: sleep 10

      - name: Run GUI-tests
        run: cd ui-tests && dotnet test

  # Deploy
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [unit_tests, api_tests, gui_tests]
    steps:
      - name: Deploy App
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # Installera nödvändiga verktyg
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pm2

            # Gå till projektmappen
            cd /srv/www/halmstad/editor

            # Om repot inte finns, klona det
            if [ ! -d ".git" ]; then
              rm -rf * .*
              git clone https://github.com/editorjakupi/testning-av-crmsystem.git .
            else
              git fetch
              git reset --hard origin/main
            fi

            # Bygg och starta client
            cd client
            npm ci
            npm run build

            # Bygg och starta server
            cd ../server
            dotnet restore
            pm2 stop crm-system || true
            pm2 delete crm-system || true
            pm2 start "dotnet run" --name crm-system
