# Denna workflow kör enhetstester, API-tester och GUI-tester för CRM-systemet
name: CRM System Tests

# Trigger: Workflowen körs när du pushar till eller gör en PR till "main"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: "8.0.x"
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  # Enhetstester
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Steg 1: Checka ut koden från ditt repository
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Installera rätt version av .NET SDK
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 3: Skapa appsettings.Testing.json
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 4: Återställ beroenden
      - name: Restore dependencies
        run: dotnet restore

      # Steg 5: Bygg projektet (utan att återställa igen)
      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      # Steg 6: Kör unit testing med högre detaljeringsgrad
      - name: Run unit tests
        run: dotnet test --configuration Release --no-build --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing

  # API-tester
  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit_tests # Kör endast om unit testerna går igenom
    steps:
      # Steg 1: Checka ut koden
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Installera Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Steg 3: Installera .NET
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 4: Skapa appsettings.Testing.json
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 5: Installera Newman
      - name: Install Newman
        run: npm install -g newman

      # Steg 6: Installera projektberoenden
      - name: Install project dependencies
        run: npm install

      # Steg 7: Installera .NET-beroenden
      - name: Install dotnet project dependencies
        run: dotnet restore

      # Steg 8: Bygg projektet
      - name: Build
        run: dotnet build

      # Steg 9: Starta servern i bakgrunden
      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      # Steg 10: Vänta på att servern ska starta
      - name: Wait for server to start
        run: sleep 10

      # Steg 11: Kör API-tester
      - name: Run API-Tests
        run: newman run ./api-test/collection.json -e ./api-test/environment.json

  # GUI-tester
  gui_tests:
    name: GUI Tests
    runs-on: ubuntu-latest
    needs: api_tests # Kör endast om api testerna går igenom
    steps:
      # Steg 1: Checka ut koden
      - name: Check out repository code
        uses: actions/checkout@v3

      # Steg 2: Installera .NET
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Steg 3: Skapa appsettings.Testing.json
      - name: Create appsettings.Testing.json
        run: |
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ env.DB_HOST }};Port=${{ env.DB_PORT }};Database=${{ env.DB_NAME }};Username=${{ env.DB_USER }};Password=${{ env.DB_PASSWORD }}"
            },
            "Email": {
              "SmtpServer": "smtp.gmail.com",
              "SmtpPort": 587,
              "FromEmail": "test@example.com",
              "Password": "test-password"
            }
          }' > server/appsettings.Testing.json

      # Steg 4: Installera .NET-beroenden
      - name: Install dotnet project dependencies
        run: dotnet restore

      # Steg 5: Bygg/Restore Playwright Project
      - name: Build/Restore Playwright Project
        run: cd ui-tests && dotnet build

      # Steg 6: Installera Playwright browsers
      - name: Install Playwright browsers
        run: cd ui-tests && pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps

      # Steg 7: Starta servern i bakgrunden
      - name: Start Server
        run: cd server && nohup dotnet run &
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ASPNETCORE_URLS: http://localhost:3000

      # Steg 8: Vänta på att servern ska starta
      - name: Wait for server to start
        run: sleep 10

      # Steg 9: Kör GUI-tester
      - name: Run GUI-tests
        run: cd ui-tests && dotnet test

  # Deploy
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [unit_tests, api_tests, gui_tests] # Kör endast om alla tidigare tester är OK
    steps:
      - name: Deploy App
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd /srv/www/halmstad/editor
            git pull
            cd client
            npm ci
            npm run build
            cd ../server
            dotnet restore
            pm2 stop crm-system
            pm2 delete crm-system
            pm2 start "dotnet run" --name crm-system
